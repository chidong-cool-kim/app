import React, { useState, useEffect, useMemo } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  Image,
  TextInput,
  ActivityIndicator,
  Switch,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import * as ImagePicker from 'expo-image-picker';
import AsyncStorage from '@react-native-async-storage/async-storage';
import userDataService from './userDataService';
import { getScreenInfo, responsive, createResponsiveStyles } from './utils/responsive';
import MobileSafeArea from './components/MobileSafeArea';
import MobileModal from './components/MobileModal';
import effectSettingsService from './services/EffectSettingsService';
import { useResponsive } from './hooks/useResponsive';
import OrientationLock from './components/OrientationLock';

export default function Settings() {
  const navigation = useNavigation();
  const responsiveUtil = useResponsive();
  const [userInfo, setUserInfo] = useState(null);
  const [profileImage, setProfileImage] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editName, setEditName] = useState('');
  const [editUsername, setEditUsername] = useState('');
  const [screenInfo, setScreenInfo] = useState(getScreenInfo());
  const [effectSettings, setEffectSettings] = useState({
    snowEffect: false,
    autumnEffect: false,
    cherryBlossomEffect: false,
    rainEffect: false,
    shootingStarEffect: false,
    isPremiumUser: false,
    effectIntensity: 30,
  });

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const user = await userDataService.getCurrentUser();
      if (user) {
        setUserInfo(user);
        setEditName(user.name || '');
        setEditUsername(user.username || '');
        setProfileImage(null);
        
        // Íµ¨ÎèÖ ÏÉÅÌÉúÏóê Îî∞Îùº ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑ§Ï†ï
        const isPremium = user.subscription?.isActive || false;
        await effectSettingsService.setPremiumStatus(isPremium);
        
        // Ìö®Í≥º ÏÑ§Ï†ï Î°úÎìú
        await effectSettingsService.loadSettings();
        const currentEffectSettings = effectSettingsService.getSettings();
        setEffectSettings(currentEffectSettings);
      }
    } catch (error) {
      console.error('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', error);
    } finally {
      setLoading(false);
    }
  };

  const uploadProfileImage = async (imageUri) => {
    try {
      const currentUser = await userDataService.getCurrentUser();
      if (!currentUser) {
        Alert.alert('Ïò§Î•ò', 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        return false;
      }

      const formData = new FormData();
      formData.append('email', currentUser.email);
      formData.append('profileImage', {
        uri: imageUri,
        type: 'image/jpeg',
        name: 'profile.jpg',
      });

      const updateResponse = await fetch('http://192.168.45.53:5000/api/user/profile-image', {
        method: 'PUT',
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        body: formData
      });

      const data = await updateResponse.json();
      
      if (updateResponse.ok && data.success) {
        const serverImageUrl = `http://192.168.45.53:5000${data.user.profileImage}`;
        console.log('üì∏ ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', serverImageUrl);
        const updatedUser = { ...currentUser, profileImage: serverImageUrl };
        await userDataService.updateCurrentUser(updatedUser);
        
        setUserInfo(updatedUser);
        setProfileImage(serverImageUrl);
        
        Alert.alert('ÏÑ±Í≥µ', 'ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.\nÎã§Î•∏ ÌôîÎ©¥ÏóêÏÑúÎèÑ ÏûêÎèôÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Îê©ÎãàÎã§.');
        return true;
      } else {
        throw new Error(data.message || 'ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®');
      }
    } catch (error) {
      console.error('ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', 'ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      return false;
    }
  };

  const pickImage = async () => {
    try {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Í∂åÌïú ÌïÑÏöî', 'Í∞§Îü¨Î¶¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled) {
        const imageUri = result.assets[0].uri;
        setProfileImage(imageUri);
        
        const uploadSuccess = await uploadProfileImage(imageUri);
        
        if (!uploadSuccess) {
          const currentUser = await userDataService.getCurrentUser();
          setProfileImage(currentUser?.profileImage || null);
        }
      }
    } catch (error) {
      console.error('Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', 'Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      
      const currentUser = await userDataService.getCurrentUser();
      setProfileImage(currentUser?.profileImage || null);
    }
  };

  const saveUserInfo = async () => {
    try {
      setUserInfo(prev => ({
        ...prev,
        name: editName,
        username: editUsername,
      }));
      setShowEditModal(false);
      Alert.alert('ÏÑ±Í≥µ', 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      Alert.alert('Ïò§Î•ò', error.message);
    }
  };

  const handleLogout = () => {
    Alert.alert(
      'Î°úÍ∑∏ÏïÑÏõÉ',
      'Ï†ïÎßêÎ°ú Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Î°úÍ∑∏ÏïÑÏõÉ',
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.removeItem('currentUser');
              await AsyncStorage.removeItem('is_authenticated');
              await AsyncStorage.removeItem('userMessages');
              
              userDataService.clearCurrentUser();
              
              navigation.reset({
                index: 0,
                routes: [{ name: 'Login' }],
              });
            } catch (error) {
              console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
              Alert.alert('Ïò§Î•ò', 'Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
          }
        }
      ]
    );
  };

  const handleEffectChange = async (effectType) => {
    try {
      console.log('Ìö®Í≥º Î≥ÄÍ≤Ω:', effectType);

      await effectSettingsService.setEffect(effectType);
      const updatedSettings = effectSettingsService.getSettings();
      setEffectSettings(updatedSettings);
      
      let message = '';
      switch (effectType) {
        case 'none':
          message = 'ÌäπÏàò Ìö®Í≥ºÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.';
          break;
        case 'snow':
          message = 'Îàà ÎÇ¥Î¶¨Îäî Ìö®Í≥ºÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§!';
          break;
        case 'autumn':
          message = 'Í∞ÄÏùÑ ÎÇòÎ≠áÏûé Ìö®Í≥ºÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§!';
          break;
        case 'cherryBlossom':
          message = 'Î≤öÍΩÉ Ìö®Í≥ºÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§!';
          break;
        case 'rain':
          message = 'ÎπÑ ÎÇ¥Î¶¨Îäî Ìö®Í≥ºÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§!';
          break;
        case 'shootingStar':
          message = 'Ïú†ÏÑ±Ïö∞ Ìö®Í≥ºÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§!';
          break;
      }
      
      Alert.alert('ÏÑ§Ï†ï ÏôÑÎ£å', message);
    } catch (error) {
      console.error('Ìö®Í≥º ÏÑ§Ï†ï Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', error.message || 'ÏÑ§Ï†ï Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const handleDeleteAccount = () => {
    Alert.alert(
      'Í≥ÑÏ†ï ÏÇ≠Ï†ú',
      'Ï†ïÎßêÎ°ú Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎ©∞, Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'ÏÇ≠Ï†ú',
          style: 'destructive',
          onPress: () => {
            Alert.alert(
              'ÏµúÏ¢Ö ÌôïÏù∏',
              'Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÎ©¥ Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.\n\nÍ≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
              [
                { text: 'Ï∑®ÏÜå', style: 'cancel' },
                {
                  text: 'ÏÇ≠Ï†ú',
                  style: 'destructive',
                  onPress: async () => {
                    try {
                      await userDataService.deleteAccount();
                      await AsyncStorage.clear();
                      Alert.alert('ÏôÑÎ£å', 'Í≥ÑÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                      navigation.reset({
                        index: 0,
                        routes: [{ name: 'Login' }],
                      });
                    } catch (error) {
                      Alert.alert('Ïò§Î•ò', error.message);
                      console.error('Í≥ÑÏ†ï ÏÇ≠Ï†ú Ïã§Ìå®:', error);
                      Alert.alert('Ïò§Î•ò', 'Í≥ÑÏ†ï ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                    }
                  }
                }
              ]
            );
          }
        }
      ]
    );
  };

  // Î∞òÏùëÌòï Ïä§ÌÉÄÏùº Ï†ÅÏö©
  const styles = useMemo(
    () => responsiveUtil.applyAll(baseStyles), 
    [responsiveUtil]
  );

  if (loading) {
    return (
      <OrientationLock isNoteScreen={false}>
        <MobileSafeArea style={styles.container} backgroundColor="#f5f5f5">
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4A90E2" />
          <Text style={styles.settingText}>Î°úÎî© Ï§ë...</Text>
        </View>
        </MobileSafeArea>
      </OrientationLock>
    );
  }

  return (
    <OrientationLock isNoteScreen={false}>
      <MobileSafeArea style={styles.container} backgroundColor="#f5f5f5">
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Text style={styles.backButton}>‚Üê Îí§Î°ú</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>ÏÑ§Ï†ï</Text>
        <View style={styles.headerRight} />
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* ÌîÑÎ°úÌïÑ ÏÑπÏÖò */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>ÌîÑÎ°úÌïÑ</Text>
          
          <TouchableOpacity style={styles.profileSection} onPress={pickImage}>
            <View style={styles.profileImageContainer}>
              {(profileImage || userInfo?.profileImage) ? (
                <Image 
                  source={{ uri: profileImage || userInfo?.profileImage }} 
                  style={styles.profileImage} 
                />
              ) : (
                <View style={styles.defaultProfileImage}>
                  <Text style={styles.defaultProfileText}>
                    {userInfo?.name?.charAt(0) || userInfo?.email?.charAt(0) || '?'}
                  </Text>
                </View>
              )}
            </View>
            <View style={styles.profileInfo}>
              <Text style={styles.settingText}>{userInfo?.name || 'Ïù¥Î¶Ñ ÏóÜÏùå'}</Text>
              <Text style={styles.settingValue}>{userInfo?.email}</Text>
              <Text style={styles.changePhotoText}>ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Î≥ÄÍ≤Ω</Text>
            </View>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.settingItem} 
            onPress={() => setShowEditModal(true)}
          >
            <Text style={styles.settingText}>Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏ†ï</Text>
            <Text style={styles.settingValue}>‚Ä∫</Text>
          </TouchableOpacity>
        </View>

        {/* Íµ¨ÎèÖ Ï†ïÎ≥¥ */}
        {userInfo?.subscription && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Íµ¨ÎèÖ Ï†ïÎ≥¥</Text>
            
            <View style={styles.settingItem}>
              <View>
                <Text style={styles.settingText}>{userInfo.subscription.planName} ÌîåÎûú</Text>
                <Text style={styles.settingValue}>
                  Ïõî {userInfo.subscription.price}Ïõê ‚Ä¢ AI ÏßàÎ¨∏ {userInfo.subscription.aiQuestions}Í∞ú/Ïõî
                </Text>
              </View>
            </View>
            
            <TouchableOpacity 
              style={styles.settingItem} 
              onPress={() => navigation.navigate('Store')}
            >
              <Text style={styles.settingText}>ÌîåÎûú Î≥ÄÍ≤Ω</Text>
              <Text style={styles.settingValue}>‚Ä∫</Text>
            </TouchableOpacity>
          </View>
        )}

        {/* ÌäπÏàò Ìö®Í≥º ÏÑ§Ï†ï - Íµ¨ÎèÖÏûêÎßå */}
        {userInfo?.subscription?.isActive && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>‚ú® ÌäπÏàò Ìö®Í≥º</Text>
            
            {/* Ìö®Í≥º ÏóÜÏùå */}
            <TouchableOpacity 
              style={styles.effectOption}
              onPress={() => handleEffectChange('none')}
            >
              <View style={styles.effectOptionContent}>
                <View style={[styles.radioButton, (!effectSettings.snowEffect && !effectSettings.autumnEffect && !effectSettings.cherryBlossomEffect && !effectSettings.rainEffect && !effectSettings.shootingStarEffect) && styles.radioButtonSelected]}>
                  {(!effectSettings.snowEffect && !effectSettings.autumnEffect && !effectSettings.cherryBlossomEffect && !effectSettings.rainEffect && !effectSettings.shootingStarEffect) && <View style={styles.radioButtonInner} />}
                </View>
                <View style={{ flex: 1 }}>
                  <Text style={styles.settingText}>üö´ Ìö®Í≥º ÏóÜÏùå</Text>
                  <Text style={[styles.settingValue, { fontSize: 14, marginTop: 4 }]}>
                    ÌäπÏàò Ìö®Í≥ºÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§
                  </Text>
                </View>
              </View>
            </TouchableOpacity>

            {/* Îàà Ìö®Í≥º */}
            <TouchableOpacity 
              style={styles.effectOption}
              onPress={() => handleEffectChange('snow')}
            >
              <View style={styles.effectOptionContent}>
                <View style={[styles.radioButton, effectSettings.snowEffect && styles.radioButtonSelected]}>
                  {effectSettings.snowEffect && <View style={styles.radioButtonInner} />}
                </View>
                <View style={{ flex: 1 }}>
                  <Text style={styles.settingText}>‚ùÑÔ∏è Îàà ÎÇ¥Î¶¨Îäî Ìö®Í≥º</Text>
                  <Text style={[styles.settingValue, { fontSize: 14, marginTop: 4 }]}>
                    ÎåìÍ∏Ä Î∞è Ïª§ÎÆ§ÎãàÌã∞ Í∏Ä ÏûëÏÑ± Ïãú Îàà Ìö®Í≥º ÌëúÏãú
                  </Text>
                </View>
              </View>
            </TouchableOpacity>

            {/* Í∞ÄÏùÑ Ìö®Í≥º */}
            <TouchableOpacity 
              style={styles.effectOption}
              onPress={() => handleEffectChange('autumn')}
            >
              <View style={styles.effectOptionContent}>
                <View style={[styles.radioButton, effectSettings.autumnEffect && styles.radioButtonSelected]}>
                  {effectSettings.autumnEffect && <View style={styles.radioButtonInner} />}
                </View>
                <View style={{ flex: 1 }}>
                  <Text style={styles.settingText}>üçÇ Í∞ÄÏùÑ ÎÇòÎ≠áÏûé Ìö®Í≥º</Text>
                  <Text style={[styles.settingValue, { fontSize: 14, marginTop: 4 }]}>
                    Í∞ÄÏùÑ Î∂ÑÏúÑÍ∏∞Ïùò ÎÇòÎ≠áÏûéÏù¥ ÌùîÎì§Î¶¨Î©∞ Îñ®Ïñ¥ÏßëÎãàÎã§
                  </Text>
                </View>
              </View>
            </TouchableOpacity>

            {/* ÎπÑ Ìö®Í≥º */}
            <TouchableOpacity 
              style={styles.effectOption}
              onPress={() => handleEffectChange('rain')}
            >
              <View style={styles.effectOptionContent}>
                <View style={[styles.radioButton, effectSettings.rainEffect && styles.radioButtonSelected]}>
                  {effectSettings.rainEffect && <View style={styles.radioButtonInner} />}
                </View>
                <View style={{ flex: 1 }}>
                  <Text style={styles.settingText}>üåßÔ∏è ÎπÑ ÎÇ¥Î¶¨Îäî Ìö®Í≥º</Text>
                  <Text style={[styles.settingValue, { fontSize: 14, marginTop: 4 }]}>
                    ÏßÅÏÑ† ÌòïÌÉúÎ°ú ÎöùÎöù Îñ®Ïñ¥ÏßÄÎäî ÎπóÏ§ÑÍ∏∞ Ìö®Í≥º
                  </Text>
                </View>
              </View>
            </TouchableOpacity>

            {/* Ïú†ÏÑ±Ïö∞ Ìö®Í≥º */}
            <TouchableOpacity 
              style={styles.effectOption}
              onPress={() => handleEffectChange('shootingStar')}
            >
              <View style={styles.effectOptionContent}>
                <View style={[styles.radioButton, effectSettings.shootingStarEffect && styles.radioButtonSelected]}>
                  {effectSettings.shootingStarEffect && <View style={styles.radioButtonInner} />}
                </View>
                <View style={{ flex: 1 }}>
                  <Text style={styles.settingText}>üå† Ïú†ÏÑ±Ïö∞ Ìö®Í≥º</Text>
                  <Text style={[styles.settingValue, { fontSize: 14, marginTop: 4 }]}>
                    Î≥¥ÎùºÎπõ Î∞§ÌïòÎäòÏóê Î≥ÑÎò•Î≥ÑÏù¥ ÌùêÎ•¥Îäî Ìö®Í≥º
                  </Text>
                </View>
              </View>
            </TouchableOpacity>

          </View>
        )}

        {/* Ïï± ÏÑ§Ï†ï */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Ïï± ÏÑ§Ï†ï</Text>
          
          <TouchableOpacity style={styles.settingItem} onPress={() => navigation.navigate('MessageBox')}>
            <Text style={styles.settingText}>Î©îÏãúÏßÄÌï®</Text>
            <Text style={styles.settingValue}>‚Ä∫</Text>
          </TouchableOpacity>

          {/* ÌîÑÎ°úÌïÑ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï - Íµ¨ÎèÖÏûêÎßå */}
          {userInfo?.subscription?.isActive && (
            <TouchableOpacity 
              style={styles.settingItem} 
              onPress={() => {
                Alert.alert('ÌîÑÎ°úÌïÑ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï', 'ÌîÑÎ°úÌïÑ ÌÖåÎßàÏôÄ ÏÉâÏÉÅÏùÑ Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏäµÎãàÎã§.\n\nÏù¥ Í∏∞Îä•ÏùÄ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏûÖÎãàÎã§!');
              }}
            >
              <Text style={styles.settingText}>ÌîÑÎ°úÌïÑ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï</Text>
              <Text style={styles.settingValue}>‚Ä∫</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* Í≥ÑÏ†ï Í¥ÄÎ¶¨ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Í≥ÑÏ†ï Í¥ÄÎ¶¨</Text>
          
          <TouchableOpacity style={styles.settingItem} onPress={handleLogout}>
            <Text style={styles.settingText}>Î°úÍ∑∏ÏïÑÏõÉ</Text>
            <Text style={styles.settingValue}>‚Ä∫</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.settingItem} onPress={handleDeleteAccount}>
            <Text style={[styles.settingText, { color: '#FF4444' }]}>Í≥ÑÏ†ï ÏÇ≠Ï†ú</Text>
            <Text style={styles.settingValue}>‚Ä∫</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>

      {/* Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏ†ï Î™®Îã¨ */}
      <MobileModal
        visible={showEditModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowEditModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏ†ï</Text>
            
            <TextInput
              style={styles.input}
              placeholder="Ïù¥Î¶Ñ"
              placeholderTextColor="#999"
              value={editName}
              onChangeText={setEditName}
            />
            
            <TextInput
              style={styles.input}
              placeholder="ÏÇ¨Ïö©ÏûêÎ™Ö"
              placeholderTextColor="#999"
              value={editUsername}
              onChangeText={setEditUsername}
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={styles.cancelButton} 
                onPress={() => setShowEditModal(false)}
              >
                <Text style={styles.cancelButtonText}>Ï∑®ÏÜå</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.saveButton} onPress={saveUserInfo}>
                <Text style={styles.saveButtonText}>Ï†ÄÏû•</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </MobileModal>
      </MobileSafeArea>
    </OrientationLock>
  );
}

const baseStyles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingVertical: 16,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
  },
  headerTitle: {
    fontSize: 26,
    fontWeight: '700',
    color: '#000',
  },
  backButton: {
    fontSize: 16,
    fontWeight: '500',
    color: '#007AFF',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: 16,
  },
  scrollView: {
    flex: 1,
  },
  section: {
    marginTop: 20,
    marginHorizontal: 20,
    borderRadius: 12,
    padding: 16,
    backgroundColor: '#fff',
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 16,
    color: '#333',
  },
  profileSection: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  profileImageContainer: {
    marginRight: 16,
  },
  profileImage: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  defaultProfileImage: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#4A90E2',
    justifyContent: 'center',
    alignItems: 'center',
  },
  defaultProfileText: {
    color: '#fff',
    fontSize: 24,
    fontWeight: '600',
  },
  profileInfo: {
    flex: 1,
  },
  changePhotoText: {
    color: '#4A90E2',
    fontSize: 14,
    marginTop: 4,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  settingText: {
    fontSize: 16,
    color: '#333',
  },
  settingValue: {
    fontSize: 16,
    color: '#666',
  },
  headerRight: {
    width: 50,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '80%',
    padding: 24,
    borderRadius: 12,
    backgroundColor: '#fff',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 20,
    textAlign: 'center',
    color: '#333',
  },
  input: {
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
    fontSize: 16,
    backgroundColor: '#f5f5f5',
    color: '#333',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    backgroundColor: '#ccc',
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#333',
    fontSize: 16,
    fontWeight: '500',
  },
  saveButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    backgroundColor: '#4A90E2',
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
  },
  effectOption: {
    paddingVertical: 12,
    paddingHorizontal: 4,
    marginBottom: 8,
  },
  effectOptionContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  radioButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: '#E0E0E0',
    justifyContent: 'center',
    alignItems: 'center',
  },
  radioButtonSelected: {
    borderColor: '#4A90E2',
  },
  radioButtonInner: {
    width: 10,
    height: 10,
    borderRadius: 5,
    backgroundColor: '#4A90E2',
  },
});
