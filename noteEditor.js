import React, { useState, useEffect, useMemo } from 'react';
import {
  StyleSheet,
  Text,
  View,
  SafeAreaView,
  TouchableOpacity,
  TextInput,
  Alert,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  Dimensions,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';
import userDataService from './userDataService';
import { useResponsive } from './hooks/useResponsive';
import OrientationLock from './components/OrientationLock';
import { getScreenInfo } from './utils/responsive';

export default function NoteEditor() {
  const navigation = useNavigation();
  const route = useRoute();
  const responsiveUtil = useResponsive();
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [screenInfo, setScreenInfo] = useState(getScreenInfo());

  // ÌôîÎ©¥ ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    const subscription = Dimensions.addEventListener('change', () => {
      setScreenInfo(getScreenInfo());
    });
    return () => subscription?.remove();
  }, []);
  
  // ÎùºÏö∞Ìä∏ÏóêÏÑú ÎÖ∏Ìä∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const noteId = route.params?.noteId;
  const initialTitle = route.params?.title || '';
  const initialContent = route.params?.content || '';

  useEffect(() => {
    if (noteId) {
      setIsEditing(true);
      setTitle(initialTitle);
      setContent(initialContent);
    }
  }, [noteId, initialTitle, initialContent]);

  const saveNote = async () => {
    if (!title.trim()) {
      Alert.alert('ÏïåÎ¶º', 'Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    console.log('üìù [noteEditor] saveNote Ìò∏Ï∂ú:', {
      isEditing,
      noteId,
      title: title.trim(),
      content: content.trim(),
      contentLength: content.trim().length
    });

    try {
      setLoading(true);

      if (isEditing && noteId) {
        // Í∏∞Ï°¥ ÎÖ∏Ìä∏ ÏàòÏ†ï
        await userDataService.updateNote(noteId, title.trim(), content.trim());
        Alert.alert('ÏÑ±Í≥µ', 'ÎÖ∏Ìä∏Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.', [
          { text: 'ÌôïÏù∏', onPress: () => {
            // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÎ©∞ Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®
            navigation.reset({
              index: 0,
              routes: [{ name: 'Main' }],
            });
          }}
        ]);
      } else {
        // ÏÉà ÎÖ∏Ìä∏ ÏÉùÏÑ± (ÌÖçÏä§Ìä∏ ÌÉÄÏûÖÏúºÎ°ú Ï†ÄÏû•)
        await userDataService.addNote(title.trim(), content.trim());
        Alert.alert('ÏÑ±Í≥µ', 'ÌÖçÏä§Ìä∏ ÎÖ∏Ìä∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.', [
          { text: 'ÌôïÏù∏', onPress: () => {
            // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÎ©∞ Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®
            navigation.reset({
              index: 0,
              routes: [{ name: 'Main' }],
            });
          }}
        ]);
      }
    } catch (error) {
      console.error('ÎÖ∏Ìä∏ Ï†ÄÏû• Ïã§Ìå®:', error);
      
      // Ï†úÌïú ÎèÑÎã¨ ÏóêÎü¨ Ï≤òÎ¶¨
      if (error.limitReached) {
        const planName = error.currentPlan === 'free' ? 'Î¨¥Î£å' : 
                        error.currentPlan === 'basic' ? 'Î≤†Ïù¥ÏßÅ' : 'ÌîÑÎ¶¨ÎØ∏ÏóÑ';
        const noteTypeName = error.noteType === 'drawing' ? 'Í∑∏Î¶º' : 'ÌÖçÏä§Ìä∏';
        
        Alert.alert(
          'ÎÖ∏Ìä∏ Í∞úÏàò Ï†úÌïú',
          `${error.message}\n\nÌòÑÏû¨ ÌîåÎûú: ${planName}\n\nÎçî ÎßéÏùÄ ÎÖ∏Ìä∏Î•º ÏÉùÏÑ±ÌïòÎ†§Î©¥ Ïä§ÌÜ†Ïñ¥ÏóêÏÑú ÌîåÎûúÏùÑ ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏÑ∏Ïöî.`,
          [
            { text: 'Ï∑®ÏÜå', style: 'cancel' },
            { text: 'Ïä§ÌÜ†Ïñ¥Î°ú Ïù¥Îèô', onPress: () => navigation.navigate('Store') }
          ]
        );
      } else {
        Alert.alert('Ïò§Î•ò', error.message || 'ÎÖ∏Ìä∏ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    if (title.trim() || content.trim()) {
      Alert.alert(
        'Ï†ÄÏû•ÌïòÏßÄ ÏïäÍ≥† ÎÇòÍ∞ÄÍ∏∞',
        'ÏûëÏÑ± Ï§ëÏù∏ ÎÇ¥Ïö©Ïù¥ ÏûàÏäµÎãàÎã§. Ï†ÄÏû•ÌïòÏßÄ ÏïäÍ≥† ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?',
        [
          { text: 'Ï∑®ÏÜå', style: 'cancel' },
          { text: 'ÎÇòÍ∞ÄÍ∏∞', style: 'destructive', onPress: () => navigation.navigate('Main') }
        ]
      );
    } else {
      navigation.navigate('Main');
    }
  };

  // Î∞òÏùëÌòï Ïä§ÌÉÄÏùº Ï†ÅÏö©
  const getResponsiveStyles = () => {
    if (screenInfo.isPhone) {
      return phoneStyles;
    }
    return {};
  };

  const responsiveStyles = getResponsiveStyles();
  const styles = useMemo(
    () => responsiveUtil.applyAll(baseStyles), 
    [responsiveUtil]
  );

  return (
    <OrientationLock isNoteScreen={false}>
      <SafeAreaView style={styles.safeArea}>
      <KeyboardAvoidingView 
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        {/* Ìó§Îçî */}
        <View style={[styles.header, responsiveStyles.header]}>
          <TouchableOpacity onPress={handleBack}>
            <Text style={[styles.backButton, responsiveStyles.backButton]}>‚Üê Îí§Î°ú</Text>
          </TouchableOpacity>
          <Text style={[styles.title, responsiveStyles.title]}>
            {isEditing ? 'ÎÖ∏Ìä∏ ÏàòÏ†ï' : 'ÏÉà ÎÖ∏Ìä∏'}
          </Text>
          <View style={styles.headerRight}>
            <TouchableOpacity onPress={saveNote} disabled={loading}>
              {loading ? (
                <ActivityIndicator size="small" color="#5C7CFA" />
              ) : (
                <Text style={[styles.saveButton, responsiveStyles.saveButton]}>Ï†ÄÏû•</Text>
              )}
            </TouchableOpacity>
          </View>
        </View>

        {/* ÎÖ∏Ìä∏ Ìé∏Ïßë ÏòÅÏó≠ */}
        <View style={[styles.editorContainer, responsiveStyles.editorContainer]}>
          {/* Ï†úÎ™© ÏûÖÎ†• */}
          <TextInput
            style={[styles.titleInput, responsiveStyles.titleInput]}
            placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
            value={title}
            onChangeText={setTitle}
            maxLength={100}
            autoFocus={!isEditing}
          />

          {/* ÎÇ¥Ïö© ÏûÖÎ†• */}
          <TextInput
            style={[styles.contentInput, responsiveStyles.contentInput]}
            placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
            value={content}
            onChangeText={setContent}
            multiline
            textAlignVertical="top"
          />

          {/* Í∏ÄÏûê Ïàò ÌëúÏãú */}
          <View style={[styles.statusBar, responsiveStyles.statusBar]}>
            <Text style={[styles.statusText, responsiveStyles.statusText]}>
              Ï†úÎ™©: {title.length}/100Ïûê
            </Text>
            <Text style={[styles.statusText, responsiveStyles.statusText]}>
              ÎÇ¥Ïö©: {content.length}Ïûê
            </Text>
          </View>
        </View>
      </KeyboardAvoidingView>
      </SafeAreaView>
    </OrientationLock>
  );
}

const baseStyles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
  },
  backButton: {
    fontSize: 16,
    color: '#5C7CFA',
    width: 60,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
    textAlign: 'center',
  },
  headerRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    width: 60,
    justifyContent: 'flex-end',
  },
  drawingModeButton: {
    backgroundColor: '#f59e0b',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  drawingModeText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  aiButton: {
    marginRight: 8,
  },
  aiButtonText: {
    fontSize: 18,
  },
  saveButton: {
    fontSize: 16,
    color: '#5C7CFA',
    fontWeight: '600',
  },
  editorContainer: {
    flex: 1,
    backgroundColor: 'white',
    margin: 16,
    borderRadius: 12,
    padding: 16,
  },
  titleInput: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
    paddingBottom: 12,
    marginBottom: 16,
  },
  contentInput: {
    flex: 1,
    fontSize: 16,
    color: '#333',
    lineHeight: 24,
  },
  statusBar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E5E5E5',
  },
  statusText: {
    fontSize: 12,
    color: '#999',
  },
});

const phoneStyles = StyleSheet.create({
  header: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    paddingTop: Platform.OS === 'ios' ? 52 : 32, // Safe Area: iOS 44+8, Android 24+8
  },
  backButton: {
    fontSize: 15,
    width: 50,
  },
  title: {
    fontSize: 16,
    flex: 1,
    textAlign: 'center',
  },
  saveButton: {
    fontSize: 15,
  },
  headerRight: {
    width: 50,
    justifyContent: 'flex-end',
  },
  editorContainer: {
    margin: 12,
    padding: 12,
  },
  titleInput: {
    fontSize: 18,
    paddingBottom: 10,
    marginBottom: 12,
  },
  contentInput: {
    fontSize: 15,
    lineHeight: 22,
  },
  statusBar: {
    paddingTop: 10,
  },
  statusText: {
    fontSize: 11,
  },
});
